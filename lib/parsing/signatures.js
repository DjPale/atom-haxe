

//Based on
// https://github.com/nadako/hxsublime/blob/master/src/SignatureHelper.hx
//Not done, etc.

module.exports = {

      //String->String
    getCloseChar:function( c ) {
        var r = '';
        switch (c) {
            case "(": r = ")"; break;
            case "<": r = ">"; break;
            case "{": r = "}"; break;
            default: break;
        }
        return r;
    },

      //String->String
    parse: function(_intype) {

        var groupRegex = /\$(\d)+/g;
        var parenRegex = /^\((.*)\)$/;
        var argNameRegex = /^(\??\w+) : /;
        var monomorphRegex = /^Unknown<\d+>$/;

        // replace arrows to ease parsing ">" in type params
        var type = _intype.replace(/ -> /g, "%");

        // prepare a simple toplevel signature without nested arrows
        // nested arrow can be in () or <> and we don't need to modify them,
        // so we store them separately in `groups` map and replace their occurence
        // with a group name in the toplevel string
        var toplevel = [];//StringBuf
        var groups = {}; //Map
        var closeStack = [];//new haxe.ds.GenericStack();
        var depth = 0;
        var groupId = 0;

        for(var i = 0; i < type.length; ++i) {
            var char = type.charAt(i);
            if (char == "(" || char == "<" || char == "{") {
                depth++;
                closeStack.push(this.getCloseChar(char));
                if (depth == 1) {
                    groupId++;
                    groups[groupId] = [];
                    toplevel.push(char);
                    toplevel.push('$'+groupId);
                    continue;
                }
            } else if (char == closeStack[closeStack.length-1]) {
                closeStack.pop();
                depth--;
            }

            if (depth == 0) {
                toplevel.push(char);
            } else {
                groups[groupId].push(char);
            }

        } //for

        // process a sigle type entry, replacing inner content from groups
        // and removing unnecessary parentheses, String->String
        var processType = function(_in_ptype) {

            var ptype = _in_ptype;
            var gr = groupRegex.exec(ptype);
            if(gr) {

              var swapgr = true;
              var gridx = 1;
              while(swapgr) {

                var grid = gr[gridx];
                if(grid) {
                  var groupId = parseInt(grid);
                  var groupStr = groups[groupId].join('');
                  ptype = ptype.replace('$'+groupId, groupStr);
                  ptype = ptype.replace("%", "->");
                  gridx++;
                } else {
                  swapgr = false;
                }

              } //while swapping
            } //gr

            var pr = parenRegex.exec(ptype);
            if(pr) {
                ptype = pr[1];
            }

            return ptype;

        } //processType

        // split toplevel signature by the "%" (which is actually "->")
        var parts = toplevel.join('').split("%");

        // get a return or variable type
        var returnType = processType(parts.pop());

        // if there is only the return type, it's a variable
        // otherwise `parts` contains function arguments
        var isFunction = parts.length > 0;

        // format function arguments
        var args = [];
        for(var i = 0; i < parts.length; ++i) {
            var part = parts[i];

            // get argument name and type
            // if function is not a method, argument name is generated by its position
            var argname = '';
            var argtype = '';
            var ar = argNameRegex.exec(part);
            if(ar) {
                argname = ar[1];
                argtype = part.substr(ar[0].length, part.length);
            } else {
                argname = 'arg'+i;
                argtype = part;
            }

            argtype = processType(argtype);

            // we don't need to include the Void argument
            // because it represents absence of arguments
            if (argtype == "Void") {
                continue;
            }

            // if type is unknown, include only the argument name
            if(monomorphRegex.test(argtype)) {
                args.push(argname);
            } else {
                args.push(argname+':'+argtype);
            }

        } //each part

        // finally generate the signature
        var result = [];
        var res = { pre:_intype, sig:'', args:null, ret:null };
        if (isFunction) {
            res.sig += "(";
            res.sig += args.join(", ");
            res.sig += ")";
            res.args = args;
            res.ret = returnType;
        } else {
            res.sig = returnType;
        }

        return res;
    }

} //sig_helper
